module {GLuanalysis.AG.ControlFlow}{}{}

{-
          _____                    _____                    _____                    _____                    _____
         /\    \                  /\    \                  /\    \                  /\    \                  /\    \
        /::\____\                /::\____\                /::\    \                /::\    \                /::\    \
       /:::/    /               /:::/    /               /::::\    \              /::::\    \              /::::\    \
      /:::/    /               /:::/    /               /::::::\    \            /::::::\    \            /::::::\    \
     /:::/    /               /:::/    /               /:::/\:::\    \          /:::/\:::\    \          /:::/\:::\    \
    /:::/    /               /:::/    /               /:::/__\:::\    \        /:::/  \:::\    \        /:::/  \:::\    \
   /:::/    /               /:::/    /               /::::\   \:::\    \      /:::/    \:::\    \      /:::/    \:::\    \
  /:::/    /      _____    /:::/    /      _____    /::::::\   \:::\    \    /:::/    / \:::\    \    /:::/    / \:::\    \
 /:::/____/      /\    \  /:::/____/      /\    \  /:::/\:::\   \:::\    \  /:::/    /   \:::\ ___\  /:::/    /   \:::\    \
|:::|    /      /::\____\|:::|    /      /::\____\/:::/  \:::\   \:::\____\/:::/____/  ___\:::|    |/:::/____/     \:::\____\
|:::|____\     /:::/    /|:::|____\     /:::/    /\::/    \:::\  /:::/    /\:::\    \ /\  /:::|____|\:::\    \      \::/    /
 \:::\    \   /:::/    /  \:::\    \   /:::/    /  \/____/ \:::\/:::/    /  \:::\    /::\ \::/    /  \:::\    \      \/____/
  \:::\    \ /:::/    /    \:::\    \ /:::/    /            \::::::/    /    \:::\   \:::\ \/____/    \:::\    \
   \:::\    /:::/    /      \:::\    /:::/    /              \::::/    /      \:::\   \:::\____\       \:::\    \
    \:::\__/:::/    /        \:::\__/:::/    /               /:::/    /        \:::\  /:::/    /        \:::\    \
     \::::::::/    /          \::::::::/    /               /:::/    /          \:::\/:::/    /          \:::\    \
      \::::::/    /            \::::::/    /               /:::/    /            \::::::/    /            \:::\    \
       \::::/    /              \::::/    /               /:::/    /              \::::/    /              \:::\____\
        \::/____/                \::/____/                \::/    /                \::/____/                \::/    /
         ~~                       ~~                       \/____/                                           \/____/

-}

{-
██╗███╗   ███╗██████╗  ██████╗ ██████╗ ████████╗███████╗
██║████╗ ████║██╔══██╗██╔═══██╗██╔══██╗╚══██╔══╝██╔════╝
██║██╔████╔██║██████╔╝██║   ██║██████╔╝   ██║   ███████╗
██║██║╚██╔╝██║██╔═══╝ ██║   ██║██╔══██╗   ██║   ╚════██║
██║██║ ╚═╝ ██║██║     ╚██████╔╝██║  ██║   ██║   ███████║
╚═╝╚═╝     ╚═╝╚═╝      ╚═════╝ ╚═╝  ╚═╝   ╚═╝   ╚══════╝
-}
imports
{
import GLua.AG.AST
import qualified Data.Map as M
import Data.Graph.Inductive.Graph
import Data.Graph.Inductive.PatriciaTree
import qualified GLua.AG.PrettyPrint as PP
import Debug.Trace
}
include "../../GLua/AG/AST.ag"


{-
████████╗██╗   ██╗██████╗ ███████╗███████╗
╚══██╔══╝╚██╗ ██╔╝██╔══██╗██╔════╝██╔════╝
   ██║    ╚████╔╝ ██████╔╝█████╗  ███████╗
   ██║     ╚██╔╝  ██╔═══╝ ██╔══╝  ╚════██║
   ██║      ██║   ██║     ███████╗███████║
   ╚═╝      ╚═╝   ╚═╝     ╚══════╝╚══════╝
-}
{
-- | Node labels
data NodeThing = NStat MStat
    | UnknownFunction MStat
    | UnknownFunctionExpr MExpr
    | CallEntry MStat Node
    | CallExit MStat
    | ExprCallEntry MExpr Node
    | ExprCallExit MExpr
    | NReturn AReturn
    | NExpr MExpr
    | NElseIf ElseIf
-- | Edge labels
data EdgeLabel = Intra Bool | Inter (Node, Node, Node, Node) | ExprInter Bool deriving (Show)
-- | Labeled node
type ANode = LNode NodeThing
-- | Labeled edge
type AEdge = LEdge EdgeLabel
-- | Graph containing both graph and extremal labels
type AnalysisGraph = (Gr NodeThing EdgeLabel, [Node])
-- | Environment of where lables are
type LabelEnv = M.Map String Int
-- | Simplified dynamic dispatch: represents the variables where functions can come from
data DDispatch = Var MToken deriving (Eq, Ord, Show)
-- | Function info: start and return node. Every function has one FuncInfo for every return.
type FuncInfo = (Node, Node)
-- | Environment that keeps track of the functions that can be stored in variables.
type FuncEnv = M.Map DDispatch [FuncInfo]

-- | Show instance for node labels
instance Show NodeThing where
    show (NStat s)                = "Statement ("            ++ (PP.renderMStat s)                     ++ ") at " ++ PP.getMStatPos s
    show (UnknownFunction s)      = "Non-defined function (" ++ (PP.renderMStat s)                     ++ ") at " ++ PP.getMStatPos s
    show (UnknownFunctionExpr s)  = "Non-defined function (" ++ (PP.renderMExpr s)                     ++ ") at " ++ PP.getMExprPos s
    show (CallEntry s n)          = "CallEntry ("            ++ (PP.renderMStat s)                     ++ ") at " ++ PP.getMStatPos s
    show (CallExit s)             = "CallExit ("             ++ (PP.renderMStat s)                     ++ ") at " ++ PP.getMStatPos s
    show (ExprCallEntry s n)      = "ExprCallEntry ("        ++ (PP.renderMExpr s)                     ++ ") at " ++ PP.getMExprPos s
    show (ExprCallExit s)         = "ExprCallExit ("         ++ (PP.renderMExpr s)                     ++ ") at " ++ PP.getMExprPos s
    show (NReturn s)              = "Return statement ("     ++ (PP.renderAReturn s)                   ++ ") at " ++ PP.getAReturnPos s
    show (NExpr s)                = "Expression ("           ++ (PP.renderMExpr s)                     ++ ") at " ++ PP.getMExprPos s
    show (NElseIf (x, y))         = "Elseif (elseif "        ++ (PP.renderMExpr x) ++ " then <block>) at "        ++ PP.getMExprPos x

}


{-
██╗  ██╗███████╗██╗     ██████╗ ███████╗██████╗
██║  ██║██╔════╝██║     ██╔══██╗██╔════╝██╔══██╗
███████║█████╗  ██║     ██████╔╝█████╗  ██████╔╝
██╔══██║██╔══╝  ██║     ██╔═══╝ ██╔══╝  ██╔══██╗
██║  ██║███████╗███████╗██║     ███████╗██║  ██║

███████╗██╗   ██╗███╗   ██╗ ██████╗████████╗██╗ ██████╗ ███╗   ██╗███████╗
██╔════╝██║   ██║████╗  ██║██╔════╝╚══██╔══╝██║██╔═══██╗████╗  ██║██╔════╝
█████╗  ██║   ██║██╔██╗ ██║██║        ██║   ██║██║   ██║██╔██╗ ██║███████╗
██╔══╝  ██║   ██║██║╚██╗██║██║        ██║   ██║██║   ██║██║╚██╗██║╚════██║
██║     ╚██████╔╝██║ ╚████║╚██████╗   ██║   ██║╚██████╔╝██║ ╚████║███████║
-}
{
-- | Get the graph and the extremal nodes of an AST
getGraph :: AST -> AnalysisGraph
getGraph a = (controlflow_Syn_AST ag, [firstNumber_Syn_AST ag]) where
    ag = wrap_AST (sem_AST a) (Inh_AST 0 [] False)

-- | Get the reversed graph and the extremal nodes of an AST
getGraphR :: AST -> AnalysisGraph
getGraphR a = (controlflow_Syn_AST ag, map fst . lastNumbers_Syn_AST $ ag) where
    ag = wrap_AST (sem_AST a) (Inh_AST 0 [] True)

-- | Get the nodes of an AST control flow graph
getNodes a = nodes_Syn_AST (wrap_AST (sem_AST a) (Inh_AST 0 [] False))
-- | Get the edges of an AST control flow graph
getEdges a = edges_Syn_AST (wrap_AST (sem_AST a) (Inh_AST 0 [] False))

-- | Build edges from a list of half edges and an end point
buildEdgesTo :: Int -> [(Int, EdgeLabel)] -> [AEdge]
buildEdgesTo end es = map f es where
    f (i, l) = (i, end, l)

-- | Find all possible function points from local and global environments
findFunctions :: [FuncEnv] -> FuncEnv -> DDispatch -> [FuncInfo]
findFunctions loc glob dp = if dp `M.member` glob then (glob M.! dp) ++ findlocs loc else findlocs loc where
    findlocs :: [FuncEnv] -> [FuncInfo]
    findlocs [] = []
    findlocs (x : xs) = if dp `M.member` x then (x M.! dp) ++ findlocs xs else findlocs xs

-- | Reverse an edge
reverseEdge :: (Node, Node, EdgeLabel) -> (Node, Node, EdgeLabel)
reverseEdge n@(a, b, (Inter x)) = n
reverseEdge (a, b, lbl) = (b, a, lbl)
}

{-
 █████╗ ████████╗████████╗██████╗ ██╗██████╗ ██╗   ██╗████████╗███████╗███████╗
██╔══██╗╚══██╔══╝╚══██╔══╝██╔══██╗██║██╔══██╗██║   ██║╚══██╔══╝██╔════╝██╔════╝
███████║   ██║      ██║   ██████╔╝██║██████╔╝██║   ██║   ██║   █████╗  ███████╗
██╔══██║   ██║      ██║   ██╔══██╗██║██╔══██╗██║   ██║   ██║   ██╔══╝  ╚════██║
██║  ██║   ██║      ██║   ██║  ██║██║██████╔╝╚██████╔╝   ██║   ███████╗███████║
╚═╝  ╚═╝   ╚═╝      ╚═╝   ╚═╝  ╚═╝╚═╝╚═════╝  ╚═════╝    ╚═╝   ╚══════╝╚══════╝
-}

attr StatementStuff IfStuff ExprStuff VarStuff FuncName BinOp UnOp
    -- Copy of tree
    syn copy :: self
    -- Dynamic dispatch: figure out where functions are defined. Globally.
    chn globalFnEnv :: {FuncEnv}
    -- And locally
    chn localFnEnv :: {[FuncEnv]}
    -- Where the return statements are
    syn returnNumbers use {++} {[]} :: {[Node]}

attr StatementStuff IfStuff ExprStuff VarStuff BinOp UnOp
    -- Label environments are linked in AST level to force it to be fully generated
    syn labEnvS use {M.union} {M.empty} :: {LabelEnv}
    inh labEnvI :: {LabelEnv}

attr AST StatementStuff IfStuff ExprStuff VarStuff
    -- The nodes of the graph
    syn nodes use {++} {[]} :: {[ANode]}
    -- The edges of the graph
    syn edges use {++} {[]} :: {[AEdge]}
    -- Where the breaks go to
    syn breaks use {++} {[]} ::  {[(Int, EdgeLabel)]}
    -- Whether the tree is reversed
    inh reversed :: Bool
    -- Deciding flow: the first node of a statement/block/...
    chn firstNumber :: Int
    -- Deciding flow: the last node(s) of a statement/block/...
    chn lastNumbers :: {[(Int, EdgeLabel)]}

attr StatementStuff IfStuff ExprStuff VarStuff
    -- Label number
    chn number :: Int

attr StatementStuff IfStuff
    -- For continue statements: where to return to
    inh cont :: Int

attr MExpr Expr FieldList Field
    -- Any (anonymous) functions defined in this expression
    syn funs use {++} {[]} :: {[FuncInfo]}

attr PrefixExp PFExprSuffix PFExprSuffix FuncName Expr
    -- Possible identifiers for variables/function calls
    syn ddispatch use {const} {Var (MToken (LineColPos 0 0 0) Nil)} :: {DDispatch}

attr ExprSuffixList PFExprSuffix PrefixExp Expr
    -- Whether an expression represents a function call
    syn isCall use {&&} {False} :: Bool

attr MExpr MExprList VarsList Declaration
    -- Function calls in expressions, starting numbers
    syn exprInterCall use {++} {[]} :: {[Int]}
    -- Store links for future returns from the function in the expression to the caller
    syn exprInterReturn use {++} {[]} :: {[(Int, EdgeLabel)]}

attr Declaration VarsList
    -- Functions defined in declarations
    syn fnEnv use {M.union} {M.empty} :: {FuncEnv}

attr AST
    -- The control flow graph of the AST
    syn controlflow :: {Gr NodeThing EdgeLabel}

attr Stat
    -- Inherit the MStat that holds it
    inh mstat :: {MStat}

attr Block AReturn
    -- Whether a return should be made if not present.
    -- All functions must have at least one return.
    inh makeReturn :: Bool

attr IfStuff
    -- Where the edge should go if the condition of an (else)If statement fails
    chn failNumber :: Int

{-
███████╗███████╗███╗   ███╗ █████╗ ███╗   ██╗████████╗██╗ ██████╗███████╗
██╔════╝██╔════╝████╗ ████║██╔══██╗████╗  ██║╚══██╔══╝██║██╔════╝██╔════╝
███████╗█████╗  ██╔████╔██║███████║██╔██╗ ██║   ██║   ██║██║     ███████╗
╚════██║██╔══╝  ██║╚██╔╝██║██╔══██║██║╚██╗██║   ██║   ██║██║     ╚════██║
███████║███████╗██║ ╚═╝ ██║██║  ██║██║ ╚████║   ██║   ██║╚██████╗███████║
╚══════╝╚══════╝╚═╝     ╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝   ╚═╝   ╚═╝ ╚═════╝╚══════╝
-}
sem AST
    | AST
        lhs.controlflow         = mkGraph @chunk.nodes @loc.edges
        loc.edges               = if @lhs.reversed then map reverseEdge @chunk.edges else @chunk.edges
        chunk.number            = 1
        chunk.labEnvI           = @chunk.labEnvS
        chunk.cont              = -1
        chunk.makeReturn        = False
        chunk.localFnEnv        = [M.empty]
        chunk.globalFnEnv       = M.empty

sem MStatList
    | Cons
        lhs.nodes               = @hd.nodes ++ @tl.nodes
        hd.number               = @lhs.number
        tl.number               = @hd.number
        lhs.number              = @tl.number
        lhs.edges               = @hd.edges ++ if null @tl.nodes then [] else buildEdgesTo @tl.firstNumber @hd.lastNumbers ++ @tl.edges
        loc.firstNumber         = @hd.firstNumber

        -- Use the last number of the head when last element
        loc.lastNumbers         = if null @tl.lastNumbers then @hd.lastNumbers else @tl.lastNumbers
    | Nil
        lhs.number              = @lhs.number
        lhs.nodes               = []
        loc.firstNumber         = @lhs.firstNumber
        loc.lastNumbers         = []

sem Declaration
    | Tuple
        lhs.fnEnv               = M.singleton @x1.ddispatch @x2.funs -- TODO: turn PrefixExpr into a DDispatch,
        lhs.number              = @x2.number
        x2.number               = @lhs.number

sem ElseIf
    | Tuple
        lhs.number              = @x2.number
        lhs.firstNumber         = @lhs.number
        lhs.lastNumbers         = @x2.lastNumbers -- TODO: handle condition failed edges separately
        x2.number               = @lhs.number + 1
        lhs.nodes               = [(@lhs.number, NElseIf @loc.copy)] ++ @x1.nodes ++ @x2.nodes
        lhs.edges               = (@lhs.number, @x2.firstNumber, Intra True) :
                                    (if @lhs.failNumber == -1 then [] else [(@lhs.number, @lhs.failNumber, Intra False)]) ++ -- failed edge
                                    @x1.edges ++ @x2.edges
        lhs.failNumber          = @lhs.number
        x2.localFnEnv           = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = tail @lhs.localFnEnv
        x2.makeReturn           = False

sem ElseIfList
    | Cons
        lhs.lastNumbers         = @hd.lastNumbers ++ @tl.lastNumbers
        lhs.failNumber          = if @tl.failNumber == -1 then @hd.failNumber else @tl.failNumber
        hd.failNumber           = @tl.firstNumber
        lhs.firstNumber         = @hd.firstNumber
    | Nil
        lhs.lastNumbers         = []
        lhs.firstNumber         = -1
        lhs.failNumber          = -1

sem Else
    | Just
        lhs.number              = @just.number
        just.number             = @lhs.number
        lhs.firstNumber         = @lhs.number
        lhs.lastNumbers         = @just.lastNumbers
                                -- make edge between condition failed of last (else)if to else
        lhs.edges               = (@lhs.failNumber, @lhs.number, Intra False) :
                                  @just.edges
        just.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = tail @lhs.localFnEnv
        just.makeReturn         = False
    | Nothing
        lhs.lastNumbers         = []

sem AReturn
    | AReturn
        lhs.nodes               = [(@lhs.number, NReturn @loc.copy)]
        lhs.number              = @lhs.number + 1
        lhs.returnNumbers       = [@lhs.number]
        lhs.firstNumber         = @lhs.number
    | NoReturn
        lhs.nodes               = if @lhs.makeReturn then [(@lhs.number, NReturn @loc.copy)] else []
        lhs.number              = if @lhs.makeReturn then @lhs.number + 1 else @lhs.number
        lhs.returnNumbers       = if @lhs.makeReturn then [@lhs.number] else []
        lhs.firstNumber         = @lhs.number

sem Block
    | Block
        loc.nodes               = @stats.nodes ++ @ret.nodes
        lhs.edges               = @stats.edges ++ (if @loc.noReturn then [] else buildEdgesTo @ret.firstNumber @stats.lastNumbers)
        lhs.number              = @ret.number
        ret.number              = @stats.number
        lhs.firstNumber         = if null @stats.copy then @ret.firstNumber else @stats.firstNumber
        lhs.lastNumbers         = if @loc.noReturn then @stats.lastNumbers else [] -- don't add edges when there's a return
        loc.noReturn            = null @ret.returnNumbers

sem MStat
    | MStat
        stat.mstat              = @loc.copy


sem Stat
    | ASemicolon
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = []

    | Def
        lhs.number              = @vars.number
        vars.number             = @lhs.number + 1
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra True)]
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)] ++ @vars.nodes
        lhs.globalFnEnv         = @lhs.globalFnEnv `M.union` @vars.fnEnv
        +edges                  = (++) $ buildEdgesTo @lhs.number @vars.exprInterReturn ++
                                   map (\i -> (@lhs.number, i, ExprInter True)) @vars.exprInterCall

    | LocDef
        lhs.number              = @vars.number
        vars.number             = @lhs.number + 1
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra True)]
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)] ++ @vars.nodes
        lhs.localFnEnv          = ((head @lhs.localFnEnv) `M.union` @vars.fnEnv) : tail @lhs.localFnEnv -- add to deepest scope
        +edges                  = (++) $ buildEdgesTo @lhs.number @vars.exprInterReturn ++
                                   map (\i -> (@lhs.number, i, ExprInter True)) @vars.exprInterCall

    | AFuncCall -- make two nodes if there are candidates for functions, one node if the function is unknown
        lhs.number              = if @loc.hasFunctions then @lhs.number + 2 else @lhs.number + 1
        loc.hasFunctions        = not . null $ @loc.possibleFuncs
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [(if @loc.hasFunctions then @lhs.number + 1 else @lhs.number, Intra True)]
        lhs.nodes               = if @loc.hasFunctions then -- make two nodes
                                    [(@lhs.number, CallEntry @lhs.mstat @lhs.number), (@lhs.number + 1, CallExit @lhs.mstat)]
                                  else -- make one node
                                    [(@lhs.number, UnknownFunction @lhs.mstat)]
        loc.possibleFuncs       = findFunctions @lhs.localFnEnv @lhs.globalFnEnv @fn.ddispatch
        -- Interflow: (call, enter, exit, return), reversed in interflowR
        loc.interflowF          = map (\(f, t) -> (@lhs.number, f, t, @lhs.number + 1)) @loc.possibleFuncs
        loc.interflowR          = map (\(a,b,c,d) -> (d,c,b,a)) @loc.interflowF
        loc.interflow           = if @lhs.reversed then @loc.interflowR else @loc.interflowF
        +edges                  = (++) $ concatMap (\e@(a,b,c,d) -> [(a,b, Inter e), (c,d, Inter e)]) @loc.interflow

    | ALabel
        lhs.number              = @lhs.number + 1
        lhs.labEnvS             = M.singleton (tokenLabel @lbl) (@lhs.number)
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra True)]
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)]

    | ABreak
        lhs.number              = @lhs.number + 1
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [] -- [(@lhs.number, True)]
        lhs.breaks              = [(@lhs.number, Intra True)]
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)]

    | AContinue
        lhs.number              = @lhs.number + 1
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [] -- [(@lhs.number, True)]
        lhs.edges               = [(@lhs.number,@lhs.cont, Intra True)]
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)]

    | AGoto
        lhs.number              = @lhs.number + 1
        loc.firstNumber         = M.findWithDefault (error "couldn't find token") (tokenLabel @lbl) @lhs.labEnvI
        loc.lastNumbers         = []
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)]

    | ADo
        lhs.number              = @body.number
        body.number             = @lhs.number
        loc.firstNumber         = @body.firstNumber
        loc.lastNumbers         = @body.lastNumbers
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = @lhs.localFnEnv
        lhs.nodes               = @body.nodes
        lhs.edges               = @body.edges
        body.makeReturn         = False

    | AWhile
        lhs.number              = @body.number
        cond.number             = @lhs.number + 1
        body.number             = @cond.number
        loc.firstNumber         = @lhs.number
        body.cont               = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra False)] ++ @body.breaks
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)] ++ @body.nodes ++ @cond.nodes
        lhs.edges               = (@loc.firstNumber, @body.firstNumber, Intra True) :
                                  buildEdgesTo @lhs.number @body.lastNumbers ++
                                  @body.edges ++ @cond.edges ++
                                  -- Calls in expressions:
                                  buildEdgesTo @lhs.number @cond.exprInterReturn ++
                                  map (\i -> (@lhs.number, i, ExprInter True)) @cond.exprInterCall
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = @lhs.localFnEnv
        body.makeReturn         = False

    | ARepeat
        lhs.number              = @cond.number
        body.number             = @lhs.number + 1
        cond.number             = @body.number
        loc.firstNumber         = @body.firstNumber
        body.cont               = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra False)] ++ @body.breaks
        lhs.nodes               = @body.nodes ++ [(@lhs.number, NStat @lhs.mstat)] ++ @cond.nodes
        lhs.edges               = (@lhs.number, @body.firstNumber, Intra True) :
                                  buildEdgesTo @lhs.number @body.lastNumbers ++
                                  @body.edges ++ @cond.edges ++
                                  -- Calls in expressions:
                                  buildEdgesTo @lhs.number @cond.exprInterReturn ++
                                  map (\i -> (@lhs.number, i, ExprInter True)) @cond.exprInterCall
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = @lhs.localFnEnv
        body.makeReturn         = False

    | AIf
        cond.number             = @lhs.number + 1
        body.number             = @cond.number
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = @lhs.localFnEnv
        elifs.number            = @body.number
        elifs.failNumber        = -1
        -- link condition failed of either last elseif or the if to the else:
        els.failNumber          = if @loc.elifExists then @elifs.failNumber else @lhs.number
        els.number              = @elifs.number
        lhs.number              = @els.number
        loc.firstNumber         = @lhs.number
        loc.failNumber          = if @loc.elifExists then @elifs.failNumber else @lhs.number
        loc.elifExists          = @elifs.firstNumber /= -1
        loc.elsExists           = not . null $ @els.lastNumbers
        lhs.lastNumbers         = -- Condition failed edges of last (else)if, if no else exists
                                  (if not @loc.elsExists then
                                    [(@loc.failNumber, Intra False)]
                                   else []) ++
                                  -- The ends of all the blocks of the body, elseifs and elses
                                  @body.lastNumbers ++ @elifs.lastNumbers ++ @els.lastNumbers
        loc.nodes               = (@lhs.number, NStat @lhs.mstat) :
                                  @cond.nodes ++
                                  @body.nodes ++
                                  @elifs.nodes ++
                                  @els.nodes
        lhs.edges               = -- Condition fail edges:
                                  -- make edge between condition failed of if to elseifs if they exist
                                  (if @loc.elifExists then [(@lhs.number, @elifs.firstNumber, Intra False)] else []) ++
                                  @cond.edges ++
                                  [(@lhs.number, @body.firstNumber, Intra True)] ++
                                  @body.edges ++ @elifs.edges ++ @els.edges ++
                                  -- Calls in expressions:
                                  buildEdgesTo @lhs.number @cond.exprInterReturn ++
                                  map (\i -> (@lhs.number, i, ExprInter True)) @cond.exprInterCall
        body.makeReturn         = False

    | ANFor
        val.number              = @lhs.number + 1
        to.number               = @val.number
        step.number             = @to.number
        body.number             = @step.number
        lhs.number              = @body.number
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = @lhs.localFnEnv
        loc.firstNumber         = @lhs.number
        body.cont               = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra False)] ++ @body.breaks -- End of for loop
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)] ++ @body.nodes ++ @val.nodes ++ @to.nodes ++ @step.nodes
        lhs.edges               = (@loc.firstNumber, @body.firstNumber, Intra True) :
                                  buildEdgesTo @lhs.number @body.lastNumbers ++
                                  @body.edges ++ @val.edges ++ @to.edges ++ @step.edges ++
                                  -- Calls in expressions:
                                  buildEdgesTo @lhs.number @val.exprInterReturn ++
                                  map (\i -> (@lhs.number, i, ExprInter True)) @val.exprInterCall ++

                                  buildEdgesTo @lhs.number @to.exprInterReturn ++
                                  map (\i -> (@lhs.number, i, ExprInter True)) @to.exprInterCall ++

                                  buildEdgesTo @lhs.number @step.exprInterReturn ++
                                  map (\i -> (@lhs.number, i, ExprInter True)) @step.exprInterCall
        body.makeReturn         = False

    | AGFor
        vals.number             = @lhs.number + 1
        body.number             = @vals.number
        lhs.number              = @body.number
        loc.firstNumber         = @lhs.number
        body.cont               = @lhs.number
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = @lhs.localFnEnv
        loc.lastNumbers         = [(@lhs.number, Intra False)] ++ @body.breaks  -- End of for loop
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)] ++ @body.nodes ++ @vals.nodes
        lhs.edges               = (@loc.firstNumber, @body.firstNumber, Intra True) :
                                  buildEdgesTo @lhs.number @body.lastNumbers ++
                                  @body.edges ++ @vals.edges ++
                                  -- Calls in expressions:
                                  buildEdgesTo @lhs.number @vals.exprInterReturn ++
                                  map (\i -> (@lhs.number, i, ExprInter True)) @vals.exprInterCall
        body.makeReturn         = False

    | AFunc
        lhs.number              = @body.number
        body.number             = @lhs.number + 1
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra True)]
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)] ++ @body.nodes
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        lhs.localFnEnv          = @lhs.localFnEnv
        body.makeReturn         = True
        loc.fun                 = map (\i -> (@body.firstNumber, i)) @body.returnNumbers
        lhs.globalFnEnv         = M.insert @name.ddispatch @loc.fun @lhs.globalFnEnv

    | ALocFunc
        lhs.number              = @body.number
        body.number             = @lhs.number + 1
        loc.firstNumber         = @lhs.number
        loc.lastNumbers         = [(@lhs.number, Intra True)]
        lhs.nodes               = [(@lhs.number, NStat @lhs.mstat)] ++ @body.nodes
        body.localFnEnv         = M.empty : @lhs.localFnEnv
        body.makeReturn         = True
        loc.fun                 = map (\i -> (@body.firstNumber, i)) @body.returnNumbers
        lhs.localFnEnv          = (M.insert @name.ddispatch @loc.fun (head @lhs.localFnEnv)) : (tail @lhs.localFnEnv)

sem FuncName
    | FuncName
        lhs.ddispatch           = Var (head @names) -- TODO: suffixes?

sem PrefixExp
    | PFVar
        lhs.ddispatch           = Var @name -- TODO: suffix expressions?
        lhs.number              = @lhs.number
    | ExprVar
        lhs.ddispatch           = Var (MToken (LineColPos 0 0 0) Nil) -- TODO: Expression stuff
        expr.number             = @lhs.number + 1
        lhs.number              = @expr.number

sem ExprSuffixList
    | Cons
        lhs.isCall              = if null @tl.copy then @hd.isCall else @hd.isCall && @tl.isCall
    | Nil
        lhs.isCall              = False

sem PFExprSuffix
    | Call
        lhs.isCall              = True
    | MetaCall
        lhs.isCall              = True
    | ExprIndex
        lhs.isCall              = False
        lhs.number              = @index.number
        index.number            = @lhs.number + 1
    | DotIndex
        lhs.isCall              = False

sem MExpr
    | MExpr
        lhs.number              = @expr.number
        expr.number             = if @expr.isCall then
                                    if @loc.hasFunctions then @lhs.number + 2
                                    else @lhs.number + 1
                                  else @lhs.number
        +nodes                  = (++) $ if @expr.isCall then
                                    if @loc.hasFunctions then
                                        [(@lhs.number, ExprCallEntry @loc.copy @lhs.number), (@lhs.number + 1, ExprCallExit @loc.copy)]
                                    else
                                        [(@lhs.number, UnknownFunctionExpr @loc.copy)]
                                  else
                                    []
        loc.hasFunctions        = not . null $ @loc.possibleFuncs
        loc.possibleFuncs       = findFunctions @lhs.localFnEnv @lhs.globalFnEnv @expr.ddispatch
        loc.interflowF          = map (\(f, t) -> (@lhs.number, f, t, @lhs.number + 1)) @loc.possibleFuncs
        loc.interflowR          = map (\(a,b,c,d) -> (d,c,b,a)) @loc.interflowF
        loc.interflow           = if @lhs.reversed then @loc.interflowR else @loc.interflowF
        +edges                  = (++) $ concatMap (\e@(a,b,c,d) -> [(a,b, Inter e), (c,d, Inter e)]) @loc.interflow
        lhs.exprInterReturn     = if @expr.isCall then
                                    if @loc.hasFunctions then
                                        [(@lhs.number + 1, ExprInter False)]
                                    else [(@lhs.number, ExprInter False)]
                                  else []
        lhs.exprInterCall       = if @expr.isCall then [@lhs.number] else []

sem Expr
    | ANil
    | AFalse
    | ATrue
    | ANumber
    | AString
    | AVarArg
    | AnonymousFunc
        lhs.funs                = map (\i -> (@body.firstNumber, i)) @body.returnNumbers
        body.number             = @lhs.number
        body.cont               = 0
        lhs.number              = @body.number
        lhs.nodes               = @body.nodes
        lhs.edges               = @body.edges
        body.makeReturn         = True
    | APrefixExpr
        lhs.funs                = findFunctions @lhs.localFnEnv @lhs.globalFnEnv @pexpr.ddispatch
    | ATableConstructor
        lhs.funs                = @fields.funs
    | BinOpExpr
        lhs.funs                = @left.funs ++ @right.funs
        lhs.number              = @right.number
        left.number             = @lhs.number + 1
        right.number            = @left.number
    | UnOpExpr
        lhs.funs                = []
        right.number            = @lhs.number + 1
        lhs.number              = @right.number
