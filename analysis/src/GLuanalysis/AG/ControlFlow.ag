module {GLuanalysis.AG.ControlFlow}{}{}

imports
{
import GLua.AG.AST
import qualified Data.Map as M
import Data.Graph.Inductive.Graph
import Data.Graph.Inductive.PatriciaTree
import qualified GLua.AG.PrettyPrint as PP
}
include "../../GLua/AG/AST.ag"

{

data NodeThing = NStat Stat | NReturn AReturn | NExpr MExpr | NElseIf ElseIf

instance Show NodeThing where
    show (NStat s) = "NStat (" ++ (PP.renderStat s) ++ ")"
    show (NReturn s) = "NReturn (" ++ (PP.renderAReturn s) ++ ")"
    show (NExpr s) = "NExpr (" ++ (PP.renderMExpr s) ++ ")"
    show (NElseIf (x, y)) = "NElseIf (elseif " ++ (PP.renderMExpr x) ++ " then <block> )"

type EdgeLabel = Bool -- TODO: different label for edges
type ANode = LNode NodeThing
type AEdge = LEdge EdgeLabel
type AnalysisGraph = (Gr NodeThing EdgeLabel, [Int])

-- Environment of where which lables have
type LabelEnv = M.Map String Int


nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

getGraph :: AST -> AnalysisGraph
getGraph a = (controlflow_Syn_AST ag, [firstNumber_Syn_AST ag]) where
    ag = wrap_AST (sem_AST a) (Inh_AST 0 [] False)

getGraphR :: AST -> AnalysisGraph
getGraphR a = (controlflow_Syn_AST ag, map fst . lastNumbers_Syn_AST $ ag) where
    ag = wrap_AST (sem_AST a) (Inh_AST 0 [] True)

getNodes a = nodes_Syn_AST (wrap_AST (sem_AST a) (Inh_AST 0 [] False))
getEdges a = edges_Syn_AST (wrap_AST (sem_AST a) (Inh_AST 0 [] False))

-- | Build edges from a list of half edges and an end point
buildEdgesTo :: Int -> [(Int, EdgeLabel)] -> [AEdge]
buildEdgesTo end es = map f es where
    f (i, l) = (i, end, l)
}

attr Block MStat Stat MStatList AReturn ElseIf ElseIfList Else
    chn number :: Int -- Label number
    inh cont :: Int -- Continues: where to return to

attr AST
    syn controlflow :: {Gr NodeThing EdgeLabel}
    inh reversed :: Bool

attr AST Block MStat Stat MStatList ElseIf ElseIfList Else AReturn
    syn nodes use {++} {[]} :: {[ANode]} -- The nodes of the graph
    syn edges use {++} {[]} :: {[AEdge]} -- The edges of the graph
    syn breaks use {++} {[]} ::  {[(Int, EdgeLabel)]} -- Where the breaks go to

    chn firstNumber :: Int -- Deciding flow: the first node of a statement/block/...
    chn lastNumbers :: {[(Int, EdgeLabel)]} -- Deciding flow: the last node(s) of a statement/block/...

attr AST Block MStat Stat AReturn FuncName PrefixExp PFExprSuffix MExpr Expr Args Field BinOp UnOp MStatList MExprList FieldList Declaration VarsList ExprSuffixList ElseIf ElseIfList Else AReturn
    syn copy :: self

attr ElseIf ElseIfList Else
    chn failNumber :: Int -- Where the last (else)if is

attr Block MStat Stat ElseIf ElseIfList Else MStatList
    -- Label environments are linked in AST level to force it to be fully generated
    syn labEnvS use {M.union} {M.empty} :: {LabelEnv}
    inh labEnvI :: {LabelEnv}

sem MStatList
    | Cons       lhs.nodes                  = @hd.nodes ++ @tl.nodes
                 hd.number                  = @lhs.number
                 tl.number                  = @hd.number
                 lhs.number                 = @tl.number
                 lhs.edges                  = @hd.edges ++ if null @tl.nodes then [] else buildEdgesTo @tl.firstNumber @hd.lastNumbers ++ @tl.edges
                 loc.firstNumber            = @hd.firstNumber

                 -- Use the last number of the head when last element
                 loc.lastNumbers            = if null @tl.lastNumbers then @hd.lastNumbers else @tl.lastNumbers
    | Nil
                 lhs.number                 = @lhs.number
                 lhs.nodes                  = []
                 loc.firstNumber            = @lhs.firstNumber
                 loc.lastNumbers            = []

sem ElseIf
    | Tuple
                 lhs.number                 = @x2.number
                 lhs.firstNumber            = @lhs.number
                 lhs.lastNumbers            = @x2.lastNumbers -- TODO: handle condition failed edges separately
                 x2.number                  = @lhs.number + 1
                 lhs.nodes                  = [(@lhs.number, NElseIf @loc.copy)] ++ @x2.nodes
                 lhs.edges                  = (@lhs.number, @x2.firstNumber, True) :
                                              (if @lhs.failNumber == -1 then [] else [(@lhs.number, @lhs.failNumber, False)]) ++ -- failed edge
                                              @x2.edges
                 lhs.failNumber             = @lhs.number

sem ElseIfList
    | Cons
                 lhs.lastNumbers            = @hd.lastNumbers ++ @tl.lastNumbers
                 lhs.failNumber             = if @tl.failNumber == -1 then @hd.failNumber else @tl.failNumber
                 hd.failNumber              = @tl.firstNumber
                 lhs.firstNumber            = @hd.firstNumber
    | Nil
                 lhs.lastNumbers            = []
                 lhs.firstNumber            = -1
                 lhs.failNumber             = -1

sem Else
    | Just
                 lhs.number                 = @just.number
                 just.number                = @lhs.number
                 lhs.firstNumber            = @lhs.number
                 lhs.lastNumbers            = @just.lastNumbers
                                              -- make edge between condition failed of last (else)if to else
                 lhs.edges                  = (@lhs.failNumber, @lhs.number, False) :
                                              @just.edges
    | Nothing
                 lhs.lastNumbers            = []

sem AReturn
    | AReturn    lhs.nodes                  = [(@lhs.number, NReturn @loc.copy)]
                 lhs.number                 = @lhs.number
    | NoReturn   lhs.nodes                  = []-- TODO: Return statement
                 lhs.number                 = @lhs.number - 1

sem AST |
    AST lhs.controlflow = mkGraph @chunk.nodes @loc.edges
        loc.edges = if @lhs.reversed then map (\(x,y,z) -> (y,x,z)) @chunk.edges else @chunk.edges
        chunk.number = 1
        chunk.labEnvI = @chunk.labEnvS
        chunk.cont = -1

sem Block | Block loc.nodes                 = @stats.nodes ++ @ret.nodes
                  lhs.edges                 = @stats.edges
                  lhs.number                = @ret.number + 1
                  ret.number                = @stats.number
                  lhs.firstNumber           = @stats.firstNumber
                  lhs.lastNumbers           = @stats.lastNumbers

sem MStat | MStat


sem Stat    | ASemicolon loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, True)]

            | Def        lhs.number         = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)]

            | LocDef     lhs.number         = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)]

            | AFuncCall  lhs.number         = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] -- todo: function calls

            | ALabel     lhs.number         = @lhs.number + 1
                         lhs.labEnvS        = M.singleton (tokenLabel @lbl) (@lhs.number)
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] -- TODO: remove label from nodes and create label environment instead

            | ABreak     lhs.number         = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [] -- [(@lhs.number, True)]
                         lhs.breaks         = [(@lhs.number, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] -- TODO: remove break from nodes and create edges to end of deepest loop

            | AContinue  lhs.number         = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [] -- [(@lhs.number, True)]
                         lhs.edges          = [(@lhs.number,@lhs.cont, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] -- TODO: remove continue from nodes and create edges to start of deepest loop

            | AGoto      lhs.number         = @lhs.number + 1
                         loc.firstNumber    = M.findWithDefault (error "couldn't find token") (tokenLabel @lbl) @lhs.labEnvI
                         loc.lastNumbers    = []
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] -- TODO: remove label from nodes and create edges from label environment instead

            | ADo        lhs.number         = @body.number
                         body.number        = @lhs.number
                         loc.firstNumber    = @body.firstNumber
                         loc.lastNumbers    = @body.lastNumbers
                         lhs.nodes          = @body.nodes
                         lhs.edges          = @body.edges

            | AWhile     lhs.number         = @body.number
                         body.number        = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         body.cont          = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, False)] ++ @body.breaks  -- TODO: Add break labels here?
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
                         lhs.edges          = (@loc.firstNumber, @body.firstNumber, True) :
                                              buildEdgesTo @lhs.number @body.lastNumbers ++
                                              @body.edges

            | ARepeat    lhs.number         = @body.number
                         body.number        = @lhs.number + 1
                         loc.firstNumber    = @body.firstNumber
                         body.cont          = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, False)] ++ @body.breaks -- TODO: add breaks here?
                         lhs.nodes          = @body.nodes ++ [(@lhs.number, NStat @loc.copy)]
                         lhs.edges          = (@lhs.number, @body.firstNumber, True) :
                                              buildEdgesTo @lhs.number @body.lastNumbers ++
                                              @body.edges

            | AIf        body.number        = @lhs.number + 1
                         elifs.number       = @body.number
                         elifs.failNumber   = -1
                         -- link condition failed of either last elseif or the if to the else:
                         els.failNumber     = if @loc.elifExists then @elifs.failNumber else @lhs.number
                         els.number         = @elifs.number
                         lhs.number         = @els.number
                         loc.firstNumber    = @lhs.number
                         loc.failNumber     = if @loc.elifExists then @elifs.failNumber else @lhs.number
                         loc.elifExists     = @elifs.firstNumber /= -1
                         loc.elsExists      = not . null $ @els.lastNumbers
                         lhs.lastNumbers    = -- Condition failed edges of last (else)if, if no else exists
                                              (if not @loc.elsExists then
                                                [(@loc.failNumber, False)]
                                               else []) ++
                                              -- The ends of all the blocks of the body, elseifs and elses
                                              @body.lastNumbers ++ @elifs.lastNumbers ++ @els.lastNumbers
                         loc.nodes          = (@lhs.number, NStat @loc.copy) :
                                              @body.nodes ++
                                              @elifs.nodes ++
                                              @els.nodes
                         lhs.edges          = -- Condition fail edges:
                                              -- make edge between condition failed of if to elseifs if they exist
                                              (if @loc.elifExists then [(@lhs.number, @elifs.firstNumber, False)] else []) ++
                                              [(@lhs.number, @body.firstNumber, True)] ++
                                              @body.edges ++ @elifs.edges ++ @els.edges

            | ANFor      body.number        = @lhs.number + 1
                         lhs.number         = @body.number
                         loc.firstNumber    = @lhs.number
                         body.cont          = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, False)] ++ @body.breaks -- End of for loop -- TODO: breaks here?
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
                         lhs.edges          = (@loc.firstNumber, @body.firstNumber, True) :
                                              buildEdgesTo @lhs.number @body.lastNumbers ++
                                              @body.edges

            | AGFor      body.number        = @lhs.number + 1
                         lhs.number         = @body.number
                         loc.firstNumber    = @lhs.number
                         body.cont          = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, False)] ++ @body.breaks  -- End of for loop -- TODO: breaks here?
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
                         lhs.edges          = (@loc.firstNumber, @body.firstNumber, True) :
                                              buildEdgesTo @lhs.number @body.lastNumbers ++
                                              @body.edges -- TODO: annotate fail edge (now created by sequence) with False or something?

            | AFunc       -- TODO: functions
                         lhs.number         = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes

            | ALocFunc   lhs.number         = @lhs.number + 1
                         loc.firstNumber    = @lhs.number
                         loc.lastNumbers    = [(@lhs.number, True)]
                         lhs.nodes          = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
