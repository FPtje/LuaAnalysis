module {GLuanalysis.AG.ControlFlow}{}{}

imports
{
import GLua.AG.AST
import Data.Graph.Inductive.Graph
import Data.Graph.Inductive.PatriciaTree
import qualified GLua.AG.PrettyPrint as PP
}
include "../../GLua/AG/AST.ag"

{

data NodeThing = NStat Stat | NReturn AReturn | NExpr MExpr

instance Show NodeThing where
    show (NStat s) = "NStat (" ++ (PP.renderStat s) ++ ")"
    show (NReturn s) = "NReturn (" ++ (PP.renderAReturn s) ++ ")"
    show (NExpr s) = "NExpr (" ++ (PP.renderMExpr s) ++ ")"

type ANode = LNode NodeThing
type AEdge = LEdge Bool -- TODO: different label for edges
type AnalysisGraph = Gr NodeThing Bool


nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)

getGraph :: AST -> AnalysisGraph
getGraph a = controlflow_Syn_AST (wrap_AST (sem_AST a) (Inh_AST 0 0))

getNodes a = nodes_Syn_AST (wrap_AST (sem_AST a) (Inh_AST 0 0))
getEdges a = edges_Syn_AST (wrap_AST (sem_AST a) (Inh_AST 0 0))
}

attr Block MStat Stat MStatList AReturn ElseIf ElseIfList Else
    chn number :: Int

attr AST Block MStat Stat MStatList ElseIf ElseIfList Else AReturn
    syn controlflow :: {AnalysisGraph}
    syn nodes use {++} {[]} :: {[ANode]}
    syn edges use {++} {[]} :: {[AEdge]}

    chn firstNumber :: Int
    chn lastNumber  :: Int

attr AST Block MStat Stat AReturn FuncName PrefixExp PFExprSuffix MExpr Expr Args Field BinOp UnOp MStatList MExprList FieldList Declaration VarsList ExprSuffixList ElseIf ElseIfList Else AReturn
    syn copy :: self

sem MStatList
    | Cons       lhs.nodes       = @hd.nodes ++ @tl.nodes
                 hd.number       = @lhs.number
                 tl.number       = @hd.number
                 lhs.number      = @tl.number
                 lhs.edges       = @hd.edges ++ if null @tl.nodes then [] else (@hd.lastNumber, @tl.firstNumber, True) : @tl.edges
                 loc.firstNumber = @hd.firstNumber

                 -- Use the last number of the head when last element
                 loc.lastNumber  = if @tl.lastNumber == -1 then @hd.lastNumber else @tl.lastNumber
    | Nil        lhs.controlflow = empty
                 lhs.number      = @lhs.number
                 lhs.nodes       = []
                 loc.firstNumber = @lhs.firstNumber
                 loc.lastNumber  = -1

sem ElseIf
    | Tuple      loc.number      = @lhs.number + 1
                 lhs.controlflow = empty
                 x2.number       = @loc.number

sem ElseIfList
    | Cons       lhs.controlflow = empty
    | Nil        lhs.controlflow = empty

sem Else
    | Just       lhs.controlflow = empty
    | Nothing    lhs.controlflow = empty

sem AReturn
    | AReturn    lhs.nodes       = [(@lhs.number, NReturn @loc.copy)]
                 lhs.controlflow = empty
                 lhs.number      = @lhs.number
    | NoReturn   lhs.nodes       = []-- TODO: Return statement
                 lhs.controlflow = empty
                 lhs.number      = @lhs.number - 1

sem AST |
    AST lhs.controlflow = mkGraph @chunk.nodes @chunk.edges
        chunk.number = 1

sem Block | Block lhs.controlflow = @stats.controlflow -- fix return address?
                  loc.nodes       = @stats.nodes ++ @ret.nodes
                  lhs.edges       = @stats.edges
                  lhs.number      = @ret.number + 1
                  ret.number      = @stats.number
                  lhs.firstNumber = @stats.firstNumber
                  lhs.lastNumber  = @stats.lastNumber

sem MStat | MStat lhs.controlflow = @stat.controlflow


sem Stat    | ASemicolon lhs.controlflow = empty
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number

            | Def        lhs.controlflow = empty
                         lhs.number      = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)]

            | LocDef     lhs.controlflow = empty
                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)]
            | AFuncCall  lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number-- TODO: proper first and last
                         loc.lastNumber  = @lhs.number-- TODO: proper first and last
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)] -- todo: function calls
            | ALabel     lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)]
            | ABreak     lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number-- TODO: proper first and last
                         loc.lastNumber  = @lhs.number-- TODO: proper first and last
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)]
            | AContinue  lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number-- TODO: proper first and last
                         loc.lastNumber  = @lhs.number-- TODO: proper first and last
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)]
            | AGoto      lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number-- TODO: proper first and last
                         loc.lastNumber  = @lhs.number-- TODO: proper first and last
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)]
            | ADo        lhs.controlflow = empty
                         lhs.number = @body.number + 1
                         body.number = @lhs.number
                         loc.firstNumber = @body.firstNumber
                         loc.lastNumber  = @body.lastNumber
                         lhs.nodes       = @body.nodes
                         lhs.edges       = @body.edges
            | AWhile     lhs.controlflow = empty
                         body.number = @lhs.number + 1
                         lhs.number = @body.number
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @body.lastNumber
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy )] ++ @body.nodes
                         lhs.edges       = (@loc.lastNumber, @loc.firstNumber, True) :
                                           (@loc.firstNumber, @body.firstNumber, True) :
                                           @body.edges -- TODO: inh value for place to return with continue/break
            | ARepeat    lhs.controlflow = empty
                         lhs.number = @body.number
                         body.number = @lhs.number + 1
                         loc.firstNumber = @body.firstNumber
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = @body.nodes ++ [(@lhs.number, NStat @loc.copy)]
                         lhs.edges       = (@body.lastNumber, @lhs.number, True) :
                                           (@lhs.number, @body.firstNumber, True) :
                                           @body.edges
            | AIf        lhs.controlflow = mkGraph [] []

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         loc.nodes       = (@lhs.number, NStat @loc.copy) : @body.nodes -- TODO: elseifs
            | ANFor      lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
            | AGFor      lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
            | AFunc      lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
            | ALocFunc   lhs.controlflow = empty

                         lhs.number = @lhs.number + 1
                         loc.firstNumber = @lhs.number
                         loc.lastNumber  = @lhs.number
                         lhs.nodes       = [(@lhs.number, NStat @loc.copy)] ++ @body.nodes
