module {GLuanalysis.AG.ControlFlow}{}{}

imports
{
import GLua.AG.AST
import Data.Graph.Inductive.Graph
import Data.Graph.Inductive.PatriciaTree
}
include "../../GLua/AG/AST.ag"

{

type AnalysisGraph = Gr Int Stat


nextUnique :: Int -> (Int, Int)
nextUnique u = (u+1, u)
}

attr Block MStat Stat MStatList
	chn number :: Int

attr AST Block MStat Stat MStatList
    syn controlflow :: {AnalysisGraph}



sem MStatList
    | Cons       loc.number :: uniqueref number
    | Nil        loc.number :: uniqueref number
                 lhs.controlflow = empty

sem AST |
	AST lhs.controlflow =  @chunk.controlflow
		chunk.number = 1

sem Block | Block lhs.controlflow = @stats.controlflow -- fix return address?

sem MStat | MStat lhs.controlflow = empty
				  loc.number :: uniqueref number

sem Stat    | ASemicolon lhs.controlflow = empty
			| Def        lhs.controlflow = empty
			| LocDef     lhs.controlflow = empty
			| AFuncCall  lhs.controlflow = empty
			| ALabel     lhs.controlflow = empty
			| ABreak     lhs.controlflow = empty
			| AContinue  lhs.controlflow = empty
			| AGoto      lhs.controlflow = empty
			| ADo        lhs.controlflow = empty
                         loc.number :: uniqueref number
			| AWhile     lhs.controlflow = empty
                         loc.number :: uniqueref number
			| ARepeat    lhs.controlflow = empty
                         loc.number :: uniqueref number
			| AIf        lhs.controlflow = empty
                         loc.number :: uniqueref number
			| ANFor      lhs.controlflow = empty
                         loc.number :: uniqueref number
			| AGFor      lhs.controlflow = empty
                         loc.number :: uniqueref number
			| AFunc      lhs.controlflow = empty
                         loc.number :: uniqueref number
			| ALocFunc   lhs.controlflow = empty
                         loc.number :: uniqueref number
